package display;
// Visually displays a set of integers being sorted by popular sorting algorithms in real time. 
// Author: Dylan - last updated 9/17/21

/**
 * List of functionalities that need to included:
 * 
 * Start, stop, & clear buttons
 * Text collection - user chooses number of randomly generated integers to sort
 * JPanel for buttons and text collection on the bottom of the JFrame
 * JPanel to display the sorting on the main upper bulk of the JFrame
 * Algorithm buttons
 * 
 */

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;

import misfits.NumberGenerator;
import sorting.BubbleSort;
import sorting.Sorter;

public class UserInterface extends JPanel {

	/**
	 * The number of random integers generated to be sorted. 
	 */
	private static final int myIntCount = 368;

	/**
	 * Auto generated serialization for JPanels. 
	 */
	private static final long serialVersionUID = 1L;

	// JPanels
	/**
	 * JPanel that houses the sub-JPanels, which contain all of the buttons. Sits at
	 * the bottom of the JFrame.
	 */
	private JPanel myMasterButtonPanel;

	/**
	 * JPanel that houses the start/stop and clear buttons. Nested in
	 * buttonsMasterPanel. Sits to the left on the bottom of the JFrame.
	 */
	private JPanel myLeftButtonPanel;

	/**
	 * JPanel used to fill up the space between between the left and right buttons JPanels
	 * making a complete bar across the bottom of the frame. 
	 */
	private JPanel myCenterButtonPanel;
	
	/**
	 * JPanel that houses the algorithm buttons. Nested in buttonsMasterPanel. Sits
	 * on the right of the bottom of the JFrame.
	 */
	private JPanel myRightButtonPanel;

	// JButtons
	/**
	 * JButton that starts/stops the chosen sorting algorithm.
	 */
	private JButton myStartButton;

	// Algorithm buttons
	/**
	 * JButton for selecting bubble sort.
	 */
	private JButton myMergeSortButton;

	/**
	 * JButton for selecting bubble sort.
	 */
	private JButton myQuickSortButton;

	/**
	 * JButton for selecting bubble sort.
	 */
	private JButton myRadixSortButton;

	/**
	 * JButton for selecting bubble sort.
	 */
	private JButton myHeapSortButton;

	/**
	 * JButton for selecting bubble sort.
	 */
	private JButton myBubbleSortButton;
	
	/**
	 * JButton for randomizing values to be sorted.
	 */
	private JButton myRandomizeButton;
	
	// Extraneous elements. 
	/**
	 * Generates an array of random integers between 1 and 1200.
	 */
	private NumberGenerator myNumberGenerator;
	
	/**
	 * Points to the most recently sorted element from myRandomInts array.
	 * Used to determine which bar should be painted red. 
	 */
	private int myPointer;
	
	/**
	 * Array of integers generated by NumberGenerator to be sorted by chosen algorithm. 
	 */
	private int[] myRandomInts;

	/**
	 * Timer used refresh the paintComponent using repaint() method. 
	 */
	Timer myTimer;
	
	/**
	 * Stores instances of sorting algorithm classes to be selected by the JButtons.
	 */
	Map<String, Sorter> mySortersMap;
	
	// Sorting algorithm classes. 
	
	private JLabel algorithmDisplay;
	
	/**
	 * Reference to the currently selected sorting algorithm based on the JButtons. 
	 */
	Sorter mySorter;
	
	/**
	 * Instance of the BubbleSort class used when the BubbleSort button is selected. 
	 */
	BubbleSort myBubbleSort;

	
	/**
	 * Private constructor for this class.
	 */
	public UserInterface() {
		setup();
	}

	/**
	 * Set up layouts and styling for all JPanels including this class. Instantiate all JPanels,
	 * JButtons, & instances of sorting algorithm classes. Add action listeners to all JButtons. 
	 */
	private void setup() {

		// Instantiate extraneous elements.
		myNumberGenerator = new NumberGenerator();
		myRandomInts = myNumberGenerator.getRandomArray(myIntCount);
		myTimer = new Timer(0, new Sort());
		algorithmDisplay = new JLabel("Choose an Algorithm");
		
		// Instantiate sorting algorithm objects. 
		myBubbleSort = new BubbleSort();
		
		// Instantiate mySortersMap, adds sorting algorithms to Map. 
		mySortersMap = new HashMap<>();
		mySortersMap.put("Bubble", myBubbleSort);
		
		// Instantiate all JPanels.
		myMasterButtonPanel = new JPanel();
		myLeftButtonPanel = new JPanel();
		myCenterButtonPanel = new JPanel();
		myRightButtonPanel = new JPanel();

		// Setup layouts for this class and all of its  nested JPanels. 
		this.setLayout(new BorderLayout());
		myMasterButtonPanel.setLayout(new BorderLayout());
		myMasterButtonPanel.add(myLeftButtonPanel, BorderLayout.WEST);
		myMasterButtonPanel.add(myCenterButtonPanel, BorderLayout.CENTER);
		myMasterButtonPanel.add(myRightButtonPanel, BorderLayout.EAST);
		this.add(myMasterButtonPanel, BorderLayout.SOUTH);
		
		// Setup displayAlgorithm JLabel. 
		algorithmDisplay.setForeground(Color.yellow);
		algorithmDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
		myCenterButtonPanel.add(algorithmDisplay);

		// Set background colors for all JPanels including this class.
		myRightButtonPanel.setBackground(Color.black);
		myCenterButtonPanel.setBackground(Color.black);
		myLeftButtonPanel.setBackground(Color.black);
		this.setBackground(Color.gray);

		// Instantiate JButtons & add actions listeners to them.
		myStartButton = new JButton("          Start           ");
		myStartButton.setEnabled(false);
		myMergeSortButton = new JButton("Merge Sort");
		myRadixSortButton = new JButton("Radix Sort");
		myHeapSortButton = new JButton("Heap Sort");
		myQuickSortButton = new JButton("Quick Sort");
		myBubbleSortButton = new JButton("Bubble Sort");
		myRandomizeButton = new JButton("Get New Values");
		myStartButton.addActionListener(new StartStopListener());
		myMergeSortButton.addActionListener(new MergeSortListener());
		myRadixSortButton.addActionListener(new RadixSortListener());
		myHeapSortButton.addActionListener(new HeapSortListener());
		myQuickSortButton.addActionListener(new QuickSortListener());
		myBubbleSortButton.addActionListener(new BubbleSortListener());
		myRandomizeButton.addActionListener(new RandomizeListener());

		// Add JButtons to rightButtonsPanel JPanel.
		myRightButtonPanel.add(myRandomizeButton);
		myRightButtonPanel.add(myStartButton);

		// Add JButtons to leftButtonsPanel JPanel.
		myLeftButtonPanel.add(myBubbleSortButton);
		myLeftButtonPanel.add(myMergeSortButton);
		myLeftButtonPanel.add(myRadixSortButton);
		myLeftButtonPanel.add(myHeapSortButton);
		myLeftButtonPanel.add(myQuickSortButton);
	}
	
	// Action Listeners.
	
	// Action listener for the startStop button.
	private class StartStopListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			if (myTimer.isRunning()) {
				myTimer.stop();
				myStartButton.setText("        Start        ");
			} else {
				myTimer.start();
				myStartButton.setText("        Stop         ");
			}
		}
	}
	
	// Action listener for the bubbleSort button.
	private class BubbleSortListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			mySorter = mySortersMap.get("Bubble");
			algorithmDisplay.setText("Bubble Sort");
			reset();
		}
	}

	// Action listener for the mergeSort button.
	private class MergeSortListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			algorithmDisplay.setText("Merge Sort");

		}
	}

	// Action listener for the heapSort button.
	private class HeapSortListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			algorithmDisplay.setText("Heap Sort");

		}
	}

	// Action listener for the quickSort button.
	private class QuickSortListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			algorithmDisplay.setText("Quick Sort");

		}
	}

	// Action listener for the radixSort button.
	private class RadixSortListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			algorithmDisplay.setText("Radix Sort");

		}
	}

	// Generates a random set of integers for myRandomInts when myRandomButton is clicked.
	private class RandomizeListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			randomize();
		}
	}

	// 
	private class Sort implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			myRandomInts = mySorter.sortWithTracking(myRandomInts);
			myPointer = mySorter.getPointer();
			repaint();
			if (myPointer == -1) {
				reset();
			}
		}
	}
	
	/**
	 * Stops myTimer if running. Enables myStartButton & changes the text to "Start" if necessary. 
	 */
	private void reset() {
		if (myTimer.isRunning()) {
			myTimer.stop();
		}
		if (myStartButton.getText() == "        Stop         ") {
			myStartButton.setText("        Start        ");
		}
		if (!myStartButton.isEnabled()) {
			myStartButton.setEnabled(true);
		}
	}
	
	/**
	 * Get a new set of random integers to sort. Reset current sort to base state. 
	 */
	private void randomize() {
		myRandomInts = myNumberGenerator.getRandomArray(myIntCount);
		if (mySorter != null) {
			mySorter.reset();
		}
		repaint();
	}
	
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		int x = 40;
		if (myRandomInts != null) {
			for (int i = 0; i < myRandomInts.length; i++) {
				if (i == myPointer) {
					g.setColor(Color.red);
				} else {
					g.setColor(Color.black);
				}
				g.fillRect(x, 735 - myRandomInts[i], 3, myRandomInts[i]);
				x += 4;
			}
		}
	}
}
